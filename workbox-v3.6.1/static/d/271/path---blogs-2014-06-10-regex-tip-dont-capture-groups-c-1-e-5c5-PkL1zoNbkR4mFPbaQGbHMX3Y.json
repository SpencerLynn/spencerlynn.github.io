{"data":{"markdownRemark":{"id":"958f1dcd-bafe-5262-ac73-fb0e6698dc23","excerpt":"Regular expressions can be super useful, but they can also be a bit of a pain to work with sometimes. Yesterday I learned about something pretty handy -- a way to tell the regular expression to not capture a group. I've been dealing with captured groups that I do not need captured for years now. Finally, I found an way to remove that nuisance.\n\n","html":"<p>Regular expressions can be super useful, but they can also be a bit of a pain to work with sometimes. Yesterday I learned about something pretty handy -- a way to tell the regular expression to not capture a group. I've been dealing with captured groups that I do not need captured for years now. Finally, I found an way to remove that nuisance.</p>\n<!-- more -->\n<p>Let's begin by considering the following string with a label and a value separated by a colon. However, white space before and after the colon is optional.</p>\n<p><code class=\"language-text\">Some Header: Sample Value</code></p>\n<p>We want to capture the header text and the value text -- in this example \"Some Header\" and \"Some Value\".</p>\n<p>So we begin by writing a regular expression</p>\n<p><code class=\"language-text\">(.*)(\\s*)?:(\\s*)?(.*)</code></p>\n<p>This results in four groups<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>:</p>\n<ol>\n<li><code class=\"language-text\">Some Header</code></li>\n<li><code class=\"language-text\">nil</code></li>\n<li><code class=\"language-text\"></code></li>\n<li><code class=\"language-text\">Some Value</code></li>\n</ol>\n<p>But really, we don't want to capture the optional white space. It just creates groups we do not want or care about. It may be a nuisance, but it is also a nuisance that we can circumvent. The <code class=\"language-text\">?:</code> option inside of a group tells the regex parser to not capture the group. How convenient! So now let's modify our regex.</p>\n<p><code class=\"language-text\">(.*)(?:\\s*)?:(?:\\s*)?(.*)</code></p>\n<p>Now we have only the results we care about<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>:</p>\n<ol>\n<li><code class=\"language-text\">Some Header</code></li>\n<li><code class=\"language-text\">Some Value</code></li>\n</ol>\n<p>This is a pretty convenient regex option that I plan on using often going forward.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Note: For simplicity I intentionally left out the actual first group in the result -- the full string.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">â†©</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Regex Tip - Don't Capture Groups","date":"June 10, 2014"}}},"pageContext":{"slug":"/blogs/2014-06-10-regex-tip-dont-capture-groups/"}}