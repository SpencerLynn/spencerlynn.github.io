{"data":{"markdownRemark":{"html":"<p>I ran across this <a href=\"http://www.codeproject.com/Tips/798140/Switch-statement-alternative\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">article</a> on an alternative to switch statements. Basically it was using a look-up table rather than a switch statement.</p>\n<!-- more -->\n<p>The first example used the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre style=\"counter-reset: linenumber 0\" class=\"language-c# line-numbers\"><code class=\"language-c#\">var myNum = 12;\n\nvar cases = new Dictionary&lt;Func&lt;int, bool&gt;, Action&gt;\n{\n    { x =&gt; x &lt; 3 ,    () =&gt; Console.WriteLine(&quot;Smaller than 3&quot;)   },\n    { x =&gt; x &lt; 30 ,   () =&gt; Console.WriteLine(&quot;Smaller than 30&quot;)  },\n    { x =&gt; x &lt; 300 ,  () =&gt; Console.WriteLine(&quot;Smaller than 300&quot;) }\n};\n\ncases.First(kvp =&gt; kvp.Key(myNum)).Value();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>After reading I discussed with <a href=\"http://joshuarogers.net\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Josh Rogers</a>. We were impressed with the power to be able to define any condition you'd like as the 'key' to the lookup table. Josh pointed out the ability to add or remove 'cases' on the fly as needed. The value for the first true condition is the one returned (Oh, like a switch statement), but you can add/remove these cases on the fly (Cool, like a dictionary?). So it's as if a switch statement and a dictionary produced a child.</p>\n<p>Switch statements have default cases, though. What about those? Default cases become a bit tricky. The default case would have to be the last entry in the dictionary to ensure that it is executed last. So if you added or removed cases, you would have to ensure that the default case was still last. However, a dictionary isn't ordered -- some say it's kind of the point.</p>\n<p>Moving on, what would this default case even look like? Maybe this?</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre style=\"counter-reset: linenumber 0\" class=\"language-c# line-numbers\"><code class=\"language-c#\">x =&gt; true, () =&gt; Console.WriteLine(&quot;Default case.&quot;)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>So how would this be used in real life, anyway? It seems like some special thought and handling has to be put into each time this concept is implemented. How practical is it to have all that handling each time? It seems like a lot of code that will look the same each time you want to use one of these.</p>\n<p>Why not extract this whole idea into a class to make it easier to use? Let's call it <code class=\"language-text\">Swictionary</code><sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, since this is supposed to be the offspring of a switch and a dictionary. Since we are extracting this into a class, we can pull the default case outside of the cases themselves. This will be more clear anyway, and we won't have to worry about in what order the default case is added. We can also expose methods to add cases and update the default case.</p>\n<p>Take 1 of the <code class=\"language-text\">Swictionary</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre style=\"counter-reset: linenumber 0\" class=\"language-c# line-numbers\"><code class=\"language-c#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Swictionary&lt;T&gt;\n{\n\tprivate Dictionary&lt;T, Action&gt; Cases;\n\tprivate Action Default;\n\n\tpublic Swictionary(Dictionary&lt;T, Action&gt; cases, Action @default)\n\t{\n\t\tthis.Cases = cases;\n\t\tthis.Default = @default;\n\t}\n\n\tpublic Action GetValue(T key)\n\t{\n\t\tAction value;\n\t\tif (Cases.TryGetValue(key, out value))\n\t\t\treturn value;\n\n\t\treturn Default;\n\t}\n\n\tpublic void AddCase(T key, Action @case)\n\t{\n\t\tCases[key] = @case;\n\t}\n\n\tpublic void UpdateDefault(Action @default)\n\t{\n\t\tthis.Default = @default;\n\t}\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This seemed to work for simple types, such as <code class=\"language-text\">int</code>, <code class=\"language-text\">string</code>, etc. But the example in the <a href=\"http://www.codeproject.com/Tips/798140/Switch-statement-alternative\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">article</a> used <code class=\"language-text\">Func&lt;int, bool&gt;</code> types. This is, after all, where all the power would be. And while we're at it, why limit the user to just <code class=\"language-text\">Action</code> types as the value?</p>\n<p>I knew this could be better. So I showed this to <a href=\"https://github.com/JoeRobich\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Joey Robichaud</a> and some collaboration happened.</p>\n<p>Take 2 of <code class=\"language-text\">Swictionary</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre style=\"counter-reset: linenumber 0\" class=\"language-c# line-numbers\"><code class=\"language-c#\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Swictionary&lt;TKey, TValue&gt;\n{\n    readonly Dictionary&lt;Predicate&lt;TKey&gt;, TValue&gt; Cases;\n    TValue Default;\n\n    public Swictionary(TValue @default)\n    {\n        Default = @default;\n        this.Cases = new Dictionary&lt;Predicate&lt;TKey&gt;, TValue&gt;();\n    }\n\n    public Swictionary(Dictionary&lt;TKey, TValue&gt; cases, TValue @default)\n        : this(@default)\n    {\n        cases.ToList().ForEach(kvp =&gt; AddCase(kvp.Key, kvp.Value));\n    }\n\n    public Swictionary(Dictionary&lt;Predicate&lt;TKey&gt;, TValue&gt; cases, TValue @default)\n        : this(@default)\n    {\n        cases.ToList().ForEach(kvp =&gt; AddCase(kvp.Key, kvp.Value));\n    }\n\n    public TValue GetValue(TKey @case)\n    {\n        var caseValue = Cases.FirstOrDefault(kvp =&gt; kvp.Key(@case));\n        if (!caseValue.Equals(default(KeyValuePair&lt;Predicate&lt;TKey&gt;, TValue&gt;)))\n            return caseValue.Value;\n\n        return this.Default;\n    }\n\n    public void AddCase(TKey @case, TValue value)\n    {\n        AddCase(t =&gt; t.Equals(@case), value);\n    }\n\n    public void AddCase(Predicate&lt;TKey&gt; @case, TValue value)\n    {\n        Cases[@case] = value;\n    }\n\n    public void UpdateDefault(TValue @default)\n    {\n        this.Default = @default;\n    }\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Explore for yourself in this <a href=\"https://dotnetfiddle.net/qeApD5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotnetFiddle</a> or with this GitHub <a href=\"https://gist.github.com/SpencerLynn/634d1dbafdfd0f1acd53\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gist</a>.</p>\n<p>We generalized both the input and output of the 'switch' statement. This allows the user to do whatever pleases them, in our <code class=\"language-text\">SwitchTestDriver</code> example (found in the gist and jsFiddle), we used <code class=\"language-text\">int</code> as the input and <code class=\"language-text\">Action</code> as the output.</p>\n<p>This gives a lot of flexibility to invent new ways to use conditional look ups.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>I wish I could say I came up with the name <code class=\"language-text\">Swictionary</code>, but all that credit belongs to <a href=\"https://github.com/JoeRobich\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Joey Robichaud</a>.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">â†©</a>\n</li>\n</ol>\n</div>","excerpt":"I ran across this [article](http://www.codeproject.com/Tips/798140/Switch-statement-alternative) on an alternative to switch statements. Basically it was using a look-up table rather than a switch statement.\n\n","frontmatter":{"title":"Exploring a Switch Statement Alternative","date":"18.07.2014"}}},"pageContext":{"slug":"/blogs/2014-07-18-exploring-a-switch-statement-alternative/"}}